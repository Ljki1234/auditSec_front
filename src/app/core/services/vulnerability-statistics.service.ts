import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { AuthService } from './auth.service';

export interface VulnerabilityStatistics {
  total: number;
  xss: number;
  sqlInjection: number;
  csrf: number;
  headers: number;
  autres: number;
  globalRiskScore: number;
  critical: number;
  high: number;
  medium: number;
  low: number;
}

export interface DashboardData {
  total: number;
  xss: number;
  sqlInjection: number;
  csrf: number;
  headers: number;
  autres: number;
  globalRiskScore: number;
  criticalCount: number;
  highCount: number;
  mediumCount: number;
  lowCount: number;
  sitesSurveilles?: number;
  auditsRealises?: number;
}

@Injectable({
  providedIn: 'root'
})
export class VulnerabilityStatisticsService {
  private readonly API_BASE_URL = '/api/vulnerability-statistics';

  constructor(
    private http: HttpClient,
    private authService: AuthService
  ) {}

  private getAuthHeaders(): HttpHeaders {
    const token = this.authService.getCurrentToken();
    return new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });
  }

  /**
   * Récupère les statistiques complètes pour le tableau de bord
   */
  getDashboardStatistics(): Observable<DashboardData> {
    return this.http.get<{success: boolean, data: DashboardData, message: string}>(
      `${this.API_BASE_URL}/dashboard`,
      { headers: this.getAuthHeaders() }
    ).pipe(
      map(response => {
        if (response.success) {
          return response.data;
        } else {
          throw new Error(response.message);
        }
      }),
      catchError(error => {
        console.error('Erreur lors de la récupération des statistiques du tableau de bord:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * Récupère les statistiques complètes
   */
  getComprehensiveStatistics(): Observable<VulnerabilityStatistics> {
    return this.http.get<{success: boolean, data: VulnerabilityStatistics, message: string}>(
      `${this.API_BASE_URL}/overview`,
      { headers: this.getAuthHeaders() }
    ).pipe(
      map(response => {
        if (response.success) {
          return response.data;
        } else {
          throw new Error(response.message);
        }
      }),
      catchError(error => {
        console.error('Erreur lors de la récupération des statistiques complètes:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * Récupère les statistiques pour un site web spécifique
   */
  getWebsiteStatistics(websiteId: number): Observable<VulnerabilityStatistics> {
    return this.http.get<{success: boolean, data: VulnerabilityStatistics, message: string}>(
      `${this.API_BASE_URL}/website/${websiteId}`,
      { headers: this.getAuthHeaders() }
    ).pipe(
      map(response => {
        if (response.success) {
          return response.data;
        } else {
          throw new Error(response.message);
        }
      }),
      catchError(error => {
        console.error(`Erreur lors de la récupération des statistiques du site ${websiteId}:`, error);
        return throwError(() => error);
      })
    );
  }

  /**
   * Récupère les statistiques par type de vulnérabilité
   */
  getStatisticsByType(): Observable<any> {
    return this.http.get<{success: boolean, data: any, message: string}>(
      `${this.API_BASE_URL}/by-type`,
      { headers: this.getAuthHeaders() }
    ).pipe(
      map(response => {
        if (response.success) {
          return response.data;
        } else {
          throw new Error(response.message);
        }
      }),
      catchError(error => {
        console.error('Erreur lors de la récupération des statistiques par type:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * Récupère les statistiques par niveau de sévérité
   */
  getStatisticsBySeverity(): Observable<any> {
    return this.http.get<{success: boolean, data: any, message: string}>(
      `${this.API_BASE_URL}/by-severity`,
      { headers: this.getAuthHeaders() }
    ).pipe(
      map(response => {
        if (response.success) {
          return response.data;
        } else {
          throw new Error(response.message);
        }
      }),
      catchError(error => {
        console.error('Erreur lors de la récupération des statistiques par sévérité:', error);
        return throwError(() => error);
      })
    );
  }
}
